<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rfbatista</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on rfbatista</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Oct 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Quick tip: Find and replace with Neovim</title>
      <link>http://localhost:1313/posts/find-replace-neovim/</link>
      <pubDate>Sun, 03 Dec 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/find-replace-neovim/</guid>
      <description>Use telescope live_grep to search for what you want to replace:
Populate the results to the quick fix list with ctrl + q
Then run find and replace:
:cdo s/search/replace/g The :cdo will execute the specified command in every entry in the quick fix list.
After that, every entry have to be saved, you can go in every buffer and save manually or to save every buffer:
:cdo update References Quickfix Telescope </description>
    </item>
    <item>
      <title>IO Pipes</title>
      <link>http://localhost:1313/wiki/io-pipes/</link>
      <pubDate>Sun, 15 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/wiki/io-pipes/</guid>
      <description>With io.Pipe we have a convenient way to connect a writer to a reader, really similar to how channels work
pr, pw := io.Pipe() References justforfunc #19: mastering io.Pipes</description>
    </item>
    <item>
      <title>1 dollar side project Pt. 1 - Lightsail configuration </title>
      <link>http://localhost:1313/posts/1-dollar-startup-pt1/</link>
      <pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/1-dollar-startup-pt1/</guid>
      <description>Some context I have been using AWS lightsail services for my personal projects for some months now, and it proved to me to be quite powerful and cheap. There is a lot of options for backend-as-a-service, database-as-a-service, or whatever-as-a-service, but, or it make you really dependent on that provider (make it hard to change afterwards) or it became too expensive. In my side projects the most important thing for me is the complete control of what is going on in my services.</description>
    </item>
    <item>
      <title>C&#43;&#43; Basics</title>
      <link>http://localhost:1313/posts/cpp-basics/</link>
      <pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/cpp-basics/</guid>
      <description>C++ Basics Variaveis Toda variável segue esse formato: tipo nome da variavel = inicialização (opcional) Ex.:
int i1 = 2; int i2, i3 = 5; //i2 não é inicializado floar pi = 3.14159 char c1 = &amp;#39;a&amp;#39;, c2 = 35; Tipos pŕe definidos ![[Pasted image 20230827112516.png]]
Caracteres e Strings O tipo char pode ser utilizado para armazenar caracteres
char c = &amp;#39;f&amp;#39; Você pode representar qualquer letra que encaixe em 8 bits em um caractere.</description>
    </item>
    <item>
      <title>C&#43;&#43; Basics</title>
      <link>http://localhost:1313/wiki/cpp-basics/</link>
      <pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/wiki/cpp-basics/</guid>
      <description>C++ Basics Variaveis Toda variável segue esse formato: tipo nome da variavel = inicialização (opcional) Ex.:
int i1 = 2; int i2, i3 = 5; //i2 não é inicializado floar pi = 3.14159 char c1 = &amp;#39;a&amp;#39;, c2 = 35; Tipos pŕe definidos ![[Pasted image 20230827112516.png]]
Caracteres e Strings O tipo char pode ser utilizado para armazenar caracteres
char c = &amp;#39;f&amp;#39; Você pode representar qualquer letra que encaixe em 8 bits em um caractere.</description>
    </item>
    <item>
      <title>Funcoes em Golang</title>
      <link>http://localhost:1313/posts/go-funcoes/</link>
      <pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/go-funcoes/</guid>
      <description>Declaração de funções func nome(lista-de-parametros) (lista-de-resultados) Estratégias de tratamento de erro Propagar o error de forma que a falha em uma subrotina torne-se uma falha na rotina que fez a chamada fmt.Errorf(&amp;#34;novo error %s&amp;#34;, variavel_string, err) // cria erros descritivos ao prefixar sucessivamento informações adicionais As strings das mensagens de erro não devem começar com a letra maiusculas pois as mensagens de erro com frequencia são encadeadas Funções variádicas É uma função que pode ser chamda com um número váriavel de argumentos.</description>
    </item>
    <item>
      <title>GO - Tipos compostos</title>
      <link>http://localhost:1313/posts/go-tipo-compostos/</link>
      <pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/go-tipo-compostos/</guid>
      <description>Array Um array é uma sequencia de tamanho fixo de zero ou mais elements
var q [3]int = [3]int{1,2,3} q := [...]int{1,2,3} // com a reticencia o tamano será determinado pela quantidade de inicializadores O tamanho de um array faz parte do seu tipo
q := [3]int{1,2,3} q = [4]int{1,2,3,4} // erro de compilação: não é permitido atribuir [4]int a [3]int Arrays são inflexiveis
Fatias (slices) Uma fatia representa um sequencia de tamanho variavel cujo elementos tem o mesmo tipo.</description>
    </item>
    <item>
      <title>GO - Workspace</title>
      <link>http://localhost:1313/posts/go-workspace/</link>
      <pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/go-workspace/</guid>
      <description></description>
    </item>
    <item>
      <title>GO - Workspace</title>
      <link>http://localhost:1313/wiki/go-workspace/</link>
      <pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/wiki/go-workspace/</guid>
      <description></description>
    </item>
    <item>
      <title>Gorrotinas e Canais</title>
      <link>http://localhost:1313/posts/go-gorrotinas-canais/</link>
      <pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/go-gorrotinas-canais/</guid>
      <description>go f() // cria uma nova gorrotina que chama f() Canais Os canais sãos os meios de comunicação entre as gorrotinas Cada canal é um comunicador de um tipo particular
ch := make(chan int) // ch é do tipo chan int Um canal é uma referência a estrutura criada por make
instrução de envio: ch &amp;lt;-x instrução de recpção em uma instrução de atribuição: x = &amp;lt;-ch instrução de recepção com resultado descartado: &amp;lt;-ch Para fechar um canal close(ch)</description>
    </item>
    <item>
      <title>IO Pipes</title>
      <link>http://localhost:1313/posts/io-pipes/</link>
      <pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/io-pipes/</guid>
      <description>With io.Pipe we have a convenient way to connect a writer to a reader, really similar to how channels work
pr, pw := io.Pipe() References justforfunc #19: mastering io.Pipes</description>
    </item>
    <item>
      <title>The Pyramid Principle</title>
      <link>http://localhost:1313/posts/strategy-pyramid-principle/</link>
      <pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/strategy-pyramid-principle/</guid>
      <description>The Pyramid Principle
https://medium.com/lessons-from-mckinsey/the-pyramid-principle-f0885dd3c5c7
Time order: if there is a sequence of events that form a cause-effect relationship, you should present the ideas in time order. Structural order: break a singular thought into its parts, ensuring that you have covered all of the major supporting ideas. Degree order: present supporting ideas in rank order of importance, most to least important. </description>
    </item>
    <item>
      <title>GO - Strings</title>
      <link>http://localhost:1313/wiki/go-string/</link>
      <pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/wiki/go-string/</guid>
      <description>Uma string é uma sequencia imutavel de bytes As strings de text são convencionalmente interpretadas como sequencias ed pontos de código Unicode (runas) codificadas em UTF-8.
A função lendevolve o número de bytes não de runas
s :+ &amp;#34;hello, world&amp;#34; fmt.Println(len(s)) // 12 fmt.Println(s[0], s[7]) // &amp;#34;104 119&amp;#34; O iésimo byte de uma string não corresponde diretamente ao iésimo caracter, pois a codificação UTF-8 de um ponto de código que não seja ASCII exige mais.</description>
    </item>
    <item>
      <title>Gorrotinas e Canais</title>
      <link>http://localhost:1313/wiki/go-gorrotinas-canais/</link>
      <pubDate>Sat, 15 Jul 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/wiki/go-gorrotinas-canais/</guid>
      <description>go f() // cria uma nova gorrotina que chama f() Canais Os canais sãos os meios de comunicação entre as gorrotinas Cada canal é um comunicador de um tipo particular
ch := make(chan int) // ch é do tipo chan int Um canal é uma referência a estrutura criada por make
instrução de envio: ch &amp;lt;-x instrução de recpção em uma instrução de atribuição: x = &amp;lt;-ch instrução de recepção com resultado descartado: &amp;lt;-ch Para fechar um canal close(ch)</description>
    </item>
    <item>
      <title>GO - Tipos compostos</title>
      <link>http://localhost:1313/wiki/go-tipo-compostos/</link>
      <pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/wiki/go-tipo-compostos/</guid>
      <description>Array Um array é uma sequencia de tamanho fixo de zero ou mais elements
var q [3]int = [3]int{1,2,3} q := [...]int{1,2,3} // com a reticencia o tamano será determinado pela quantidade de inicializadores O tamanho de um array faz parte do seu tipo
q := [3]int{1,2,3} q = [4]int{1,2,3,4} // erro de compilação: não é permitido atribuir [4]int a [3]int Arrays são inflexiveis
Fatias (slices) Uma fatia representa um sequencia de tamanho variavel cujo elementos tem o mesmo tipo.</description>
    </item>
    <item>
      <title>Funcoes em Golang</title>
      <link>http://localhost:1313/wiki/go-funcoes/</link>
      <pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/wiki/go-funcoes/</guid>
      <description>Declaração de funções func nome(lista-de-parametros) (lista-de-resultados) Estratégias de tratamento de erro Propagar o error de forma que a falha em uma subrotina torne-se uma falha na rotina que fez a chamada fmt.Errorf(&amp;#34;novo error %s&amp;#34;, variavel_string, err) // cria erros descritivos ao prefixar sucessivamento informações adicionais As strings das mensagens de erro não devem começar com a letra maiusculas pois as mensagens de erro com frequencia são encadeadas Funções variádicas É uma função que pode ser chamda com um número váriavel de argumentos.</description>
    </item>
    <item>
      <title>Shoyu</title>
      <link>http://localhost:1313/photos/shoyu-1/</link>
      <pubDate>Sat, 13 Aug 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/photos/shoyu-1/</guid>
      <description></description>
    </item>
    <item>
      <title>Shoyu</title>
      <link>http://localhost:1313/photos/shoyu-2/</link>
      <pubDate>Wed, 08 Jun 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/photos/shoyu-2/</guid>
      <description></description>
    </item>
    <item>
      <title>Cornelio Procópio</title>
      <link>http://localhost:1313/photos/cornelio-1/</link>
      <pubDate>Tue, 21 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/photos/cornelio-1/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description>I&amp;rsquo;m a software engineer proficient in both Go (Golang), Python, Javascript (NodeJS) and C++. With a strong focus on efficiency and scalability, I&amp;rsquo;ve delivered high-performance solutions in areas such as cloud-based microservices and system-level programming. My commitment to clean code and rigorous testing ensures the development of robust, maintainable applications. I thrive in collaborative, dynamic environments and possess the skills to drive projects from inception to successful completion. My dual expertise in Go and Javascript makes me a versatile asset ready to tackle diverse technical challenges and contribute to innovative projects.</description>
    </item>
  </channel>
</rss>
